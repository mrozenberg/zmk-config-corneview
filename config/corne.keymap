/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        temp_layer: temp_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TEMP_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        hold_btn: hold_btn {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_BTN";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        hold_and_release: hold_and_release {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_AND_RELEASE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-on-release;
        };

        ao_and_cmd_plus: ao_and_cmd_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "AO_AND_CMD_PLUS";
            bindings = <&kp LEFT_BRACKET>, <&kp LG(MINUS)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bt_layer {
            bindings = <&tog 5>;
            key-positions = <38 39>;
            layers = <0 5>;
        };

        left_paranthesis {
            bindings = <&kp LS(N8)>;
            key-positions = <9 8>;
            layers = <0>;
            timeout-ms = <40>;
        };

        right_paranthesis {
            bindings = <&kp LS(N9)>;
            key-positions = <9 10>;
            layers = <0>;
            timeout-ms = <40>;
        };

        left_bracket {
            bindings = <&kp LA(N8)>;
            key-positions = <21 20>;
            layers = <0>;
            timeout-ms = <40>;
        };

        left_curly_bracket {
            bindings = <&kp LS(LA(N8))>;
            key-positions = <33 32>;
            layers = <0>;
            timeout-ms = <40>;
        };

        right_bracket {
            bindings = <&kp LA(N9)>;
            key-positions = <21 22>;
            layers = <0>;
            timeout-ms = <40>;
        };

        right_curly_bracket {
            bindings = <&kp RA(RS(N9))>;
            key-positions = <33 34>;
            layers = <0>;
            timeout-ms = <40>;
        };

        less_than {
            bindings = <&kp GRAVE>;
            key-positions = <7 6>;
            layers = <0>;
            timeout-ms = <40>;
        };

        more_than {
            bindings = <&kp TILDE>;
            key-positions = <19 18>;
            layers = <0>;
            timeout-ms = <40>;
        };

        b_slash {
            bindings = <&kp LS(LA(N7))>;
            key-positions = <31 32>;
            layers = <0>;
            timeout-ms = <40>;
        };

        f_slash {
            bindings = <&kp LS(N7)>;
            key-positions = <7 8>;
            layers = <0>;
            timeout-ms = <40>;
        };

        pipe {
            bindings = <&kp LA(N7)>;
            key-positions = <19 20>;
            layers = <0>;
            timeout-ms = <40>;
        };

        minus {
            bindings = <&kp SLASH>;
            key-positions = <30 31>;
            layers = <0>;
            timeout-ms = <40>;
        };

        plus {
            bindings = <&kp MINUS>;
            key-positions = <30 32>;
            layers = <0>;
            timeout-ms = <40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |  [   |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC    &hold_btn LS(LG(F12)) Q  &kp W                     &kp E                 &kp R                 &kp T     &kp Y                &kp U                  &kp I                  &kp O                      &kp P                            &kp BSPC
&kp TAB    &hold_btn LSHFT A        &hold_btn LEFT_CONTROL S  &hold_btn LEFT_ALT D  &hold_btn LEFT_GUI F  &kp G     &kp H                &hold_btn RIGHT_GUI J  &hold_btn RIGHT_ALT K  &hold_btn RIGHT_CONTROL L  &hold_btn RIGHT_SHIFT SEMICOLON  &kp SQT
&kp LSHFT  &kp Z                    &kp X                     &kp C                 &kp V                 &kp B     &temp_layer 4 N      &hold_btn K_MUTE M     &kp COMMA              &kp PERIOD                 &kp FSLH                         &ao_and_cmd_plus
                                                              &kp LGUI              &temp_layer 2 SPACE   &tog 4    &temp_layer 3 SPACE  &temp_layer 1 ENTER    &kp RALT
            >;
        };

        nav_1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  7  |  8  |  9  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 |  4  |  5  |  6  |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |  1  |  2  |  3  |   |     |     |     |     |     |      |
            //                    |  0  |     | ENT |   | ENT |     | ALT |

            bindings = <
&trans  &none           &none             &none         &none         &none     &kp C_VOLUME_UP  &kp LG(LEFT_ARROW)  &kp UP_ARROW      &kp RG(RIGHT)  &kp C_BRIGHTNESS_INC                   &kp DEL
&trans  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &none     &kp C_VOL_DN     &kp LEFT            &kp DOWN_ARROW    &kp RIGHT      &kp C_BRI_DEC                          &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS
&trans  &none           &none             &none         &none         &none     &kp K_MUTE       &kp C_PREV          &kp C_PLAY_PAUSE  &kp C_NEXT     &kp LG(C_AC_DESKTOP_SHOW_ALL_WINDOWS)  &kp LC(C_AC_DESKTOP_SHOW_ALL_WINDOWS)
                                          &trans        &trans        &trans    &trans           &trans              &trans
            >;
        };

        nav_2 {
            bindings = <
&bt BT_NXT   &none      &msc SCRL_DOWN  &mmv MOVE_UP    &msc SCRL_UP     &none        &kp C_VOLUME_UP  &kp LG(LEFT_ARROW)  &kp UP_ARROW      &kp RG(RIGHT)  &kp C_BRIGHTNESS_INC  &kp DEL
&kp LG(TAB)  &mkp LCLK  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp RCLK    &kp C_VOL_DN     &kp LEFT            &kp DOWN_ARROW    &kp RIGHT      &kp C_BRI_DEC         &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS
&trans       &mkp MB4   &none           &none           &none            &mkp MB5     &kp K_MUTE       &kp C_PREV          &kp C_PLAY_PAUSE  &kp C_NEXT     &none                 &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS
                                        &trans          &trans           &trans       &trans           &trans              &trans
            >;
        };

        Symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &hold_btn LA(RIGHT_BRACKET) RIGHT_BRACKET  &kp RA(NUMBER_2)  &kp HASH               &kp DLLR       &kp EXCL            &none   &none              &none          &none              &none            &trans
&trans  &kp PERCENT                                &kp LS(NUMBER_6)  &kp LS(N7)             &kp LA(E)      &kp LS(NUMBER_6)    &none   &kp RIGHT_COMMAND  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &hold_and_release LESS_THAN RS(NUMBER_2)
&trans  &kp LS(N8)                                 &kp LS(N9)        &kp RIGHT_PARENTHESIS  &kp LESS_THAN  &kp LS(MINUS)       &none   &none              &none          &none              &none            &hold_and_release LA(E) BACKSLASH
                                                                     &trans                 &trans         &trans              &trans  &trans             &trans
            >;
        };

        Numbers {
            bindings = <
&to 0      &kp BACKSLASH  &kp N7        &kp N8        &kp N9        &kp MINUS                &kp MINUS              &kp NUMBER_1                      &kp N2                  &kp N3                            &kp BSLH                      &kp BSPC
&kp TAB    &kp LS(N7)     &kp N4        &kp N5        &kp N6        &kp FSLH                 &kp FSLH               &hold_btn RIGHT_COMMAND NUMBER_4  &hold_btn RIGHT_ALT N5  &hold_btn RIGHT_CONTROL NUMBER_6  &hold_btn RIGHT_SHIFT LS(N7)  &none
&kp COMMA  &kp DOT        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp RIGHT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp N7                            &kp N8                  &kp N9                            &kp PERIOD                    &kp COMMA
                                        &kp N0        &kp SPACE     &trans                   &trans                 &kp ENTER                         &kp N0
            >;
        };

        bt_layer {
            bindings = <
&to 0  &none  &none  &none  &none  &bootloader    &bootloader  &none  &none  &none  &none  &bt BT_CLR
&none  &none  &none  &none  &none  &none          &none        &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none          &none        &none  &none  &none  &none  &none
                     &none  &none  &none          &none        &none  &none
            >;
        };
    };
};
